name: codacy-coverage-reporter

on: ["push", "workflow_dispatch"]

jobs:
  codacy-coverage-reporter:
    runs-on: windows-latest
    name: codacy-coverage-reporter
    steps:
    
      - uses: actions/checkout@v2
    
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.*

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore
        
      - name: Cover
        run: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=coverage /p:IncludeTestAssembly=true --no-restore
      
      - name: Populate Reports Variable
        shell: pwsh
        run: |
          $ReportPaths = Get-ChildItem *cobertura.xml -Recurse | Resolve-Path -Relative | Join-String -Separator ","
          echo "COVERAGE_REPORTS=$ReportPaths" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
    
      - name: "Set Repository Env Variables"
        shell: bash
        run: |
          echo "CODACY_ORGANIZATION_PROVIDER=$(if [[ $GITHUB_SERVER_URL == "https://github.com" ]]; then echo "gh"; else echo "ghe"; fi)" >> $GITHUB_ENV
          echo "CODACY_USERNAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)" >> $GITHUB_ENV
          echo "CODACY_PROJECT_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV

      - name: Create Codacy Project if necessary
        shell: pwsh
        run: |
              $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
              $headers.Add("api-token", "${{ secrets.CODACY_API_TOKEN }}")
              $headers.Add("caller", "string")
              $headers.Add("Content-Type", "application/json")

              $body = @{
                repositoryFullPath = $env:GITHUB_REPOSITORY
                provider = $env:CODACY_ORGANIZATION_PROVIDER
              } | ConvertTo-Json
              
              Write-Host "Sending request with body: $body"

              try {
                $response = Invoke-RestMethod 'https://app.codacy.com/api/v3/repositories' -Method 'POST' -Headers $headers -Body $body -SkipHttpErrorCheck
              } catch [System.Net.WebException] {
                Write-Host "An exception was caught: $($_.Exception.Message)"
              }

              $statusCodeInt = [int]$response.BaseResponse.StatusCode

              Write-Host Response: $statusCodeInt
              Write-Host $response
              
              $response | ConvertTo-Json
              
      - name: Upload Coverage to Codacy
        shell: bash
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -l CSharp $(find . -name 'coverage.cobertura.xml' -printf '-r %p ')
        env:
          CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}
          
        
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@master
        with:
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647
      
      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: results.sarif
          api-token: ${{ secrets.CODACY_API_TOKEN }}
      
#       - name: Run codacy-coverage-reporter
#         uses: codacy/codacy-coverage-reporter-action@v1
#         with:
#           api-token: ${{ secrets.CODACY_API_TOKEN }}
#           coverage-reports: '$($Env:COVERAGE_REPORTS)'
